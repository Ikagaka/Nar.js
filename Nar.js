// Generated by CoffeeScript 1.7.1
var Nar;

Nar = (function() {
  var Encoding, JSZip, WMDescript, XMLHttpRequest;

  XMLHttpRequest = window["XHRProxy"];

  Encoding = window["Encoding"];

  JSZip = window["JSZip"];

  WMDescript = window["WMDescript"];

  function Nar() {
    this.tree = null;
    this.install = null;
  }

  Nar.prototype.loadFromBuffer = function(buffer, callback) {
    var tree;
    this.tree = tree = Nar.unzip(buffer);
    return setTimeout((function(_this) {
      return function() {
        _this.install = Nar.parseDescript(Nar.convert(tree["install.txt"].asArrayBuffer()));
        return callback(null, tree);
      };
    })(this));
  };

  Nar.prototype.loadFromURL = function(src, callback) {
    return Nar.wget(src, "arraybuffer", (function(_this) {
      return function(err, buffer) {
        if (!!err) {
          return callback(err, null);
        }
        return _this.loadFromBuffer(buffer, callback);
      };
    })(this));
  };

  Nar.prototype.loadFromBlob = function(blob, callback) {
    return this.loadFromURL(URL.createObjectURL(blob), callback);
  };

  Nar.unzip = function(buffer) {
    var ary, dir, files, i, obj, parent, path, root, val, zip, _i, _len;
    zip = new JSZip();
    zip.load(buffer);
    files = zip.files;
    parent = root = {};
    for (path in files) {
      val = files[path];
      ary = path.split("/");
      for (i = _i = 0, _len = ary.length; _i < _len; i = ++_i) {
        dir = ary[i];
        obj = i === ary.length - 1 ? val : {};
        parent = parent[dir] = parent[dir] || obj;
      }
      parent = root;
    }
    return root;
  };

  Nar.convert = function(buffer) {
    return Encoding.codeToString(Encoding.convert(new Uint8Array(buffer), 'UNICODE', 'AUTO'));
  };

  Nar.wget = function(url, type, callback) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.addEventListener("load", function() {
      if (200 <= xhr.status && xhr.status < 300) {
        if (!!xhr.response.error) {
          return callback(new Error(xhr.response.error.message), null);
        } else {
          return callback(null, xhr.response);
        }
      } else {
        return callback(new Error(xhr.status), null);
      }
    });
    xhr.open("GET", url);
    xhr.responseType = type;
    xhr.send();
    return void 0;
  };

  Nar.parseDescript = function(text) {
    return WMDescript.parse(text);
  };

  return Nar;

})();
